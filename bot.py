import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from redis.asyncio import Redis

from monitor_playwright import fetch_categories, fetch_products_for_category

# üöÄ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏
print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")
BONUS_MIN_PCT = int(os.getenv("BONUS_MIN_PCT", 20))
BONUS_MIN_RUB = int(os.getenv("BONUS_MIN_RUB", 200))

# üì¶ Redis
redis = Redis.from_url(REDIS_URL, decode_responses=True)

# ü§ñ –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# üîò –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def get_keyboard():
    categories = await fetch_categories()
    if not categories:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", callback_data="none")]])
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"category:{url}")]
        for name, url in categories.items()
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    print("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    kb = await get_keyboard()
    await message.answer("üëã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ –æ—Ç–∑—ã–≤:", reply_markup=kb)


# üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category:"))
async def category_handler(callback: CallbackQuery):
    url = callback.data.split(":", 1)[1]
    await callback.message.edit_text("üîé –ò—â—É —Ç–æ–≤–∞—Ä—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        items = await fetch_products_for_category(url)

        filtered = [
            item for item in items
            if item["bonus"] >= BONUS_MIN_RUB and (item["bonus"] / item["price"]) * 100 >= BONUS_MIN_PCT
        ]

        if not filtered:
            await callback.message.edit_text("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            text = "üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
            for item in filtered[:10]:  # –º–∞–∫—Å–∏–º—É–º 10 —Ç–æ–≤–∞—Ä–æ–≤
                text += (
                    f"üõç <b>{item['name']}</b>\n"
                    f"üí∞ –¶–µ–Ω–∞: {item['price']} ‚ÇΩ\n"
                    f"üéÅ –ë–æ–Ω—É—Å: {item['bonus']} ‚ÇΩ\n"
                    f"üîó <a href='{item['url']}'>–°–º–æ—Ç—Ä–µ—Ç—å</a>\n\n"
                )
            await callback.message.edit_text(text, parse_mode="HTML")

    except Exception as e:
        logging.exception("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
