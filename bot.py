import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from redis.asyncio import Redis

from monitor_playwright import run_monitor  # ‚úÖ –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
REDIS_URL = os.getenv("REDIS_URL")
BONUS_MIN_PCT = int(os.getenv("BONUS_MIN_PCT", 20))
BONUS_MIN_RUB = int(os.getenv("BONUS_MIN_RUB", 200))

# üì¶ Redis
redis = Redis.from_url(REDIS_URL, decode_responses=True)

# ‚öôÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±–æ—Ç
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∑–∂–µ)
CATEGORIES = {
    "–û–¥–µ–∂–¥–∞": "https://www.wildberries.ru/catalog/zhenshchinam/odezhda",
    "–û–±—É–≤—å": "https://www.wildberries.ru/catalog/obuv",
    "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞": "https://www.wildberries.ru/catalog/elektronika",
    "–ö–æ—Å–º–µ—Ç–∏–∫–∞": "https://www.wildberries.ru/catalog/krasota",
}

# üéõ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"category:{url}")]
            for cat, url in CATEGORIES.items()
        ]
    )

# üëã –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Ç–∑—ã–≤–Ω—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏:",
        reply_markup=main_keyboard()
    )

# üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category:"))
async def process_category(callback: CallbackQuery):
    category_url = callback.data.split(":", 1)[1]
    await callback.message.edit_text("üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã, —ç—Ç–æ –∑–∞–π–º—ë—Ç 5‚Äì15 —Å–µ–∫—É–Ω–¥...")

    try:
        # ‚öôÔ∏è –ü–∞—Ä—Å–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ playwright
        items = await run_monitor(
            urls=[category_url],
            min_bonus_pct=BONUS_MIN_PCT,
            min_bonus_rub=BONUS_MIN_RUB
        )

        if not items:
            await callback.message.edit_text("‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        text = "üéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for item in items[:10]:  # –º–∞–∫—Å–∏–º—É–º 10 —à—Ç—É–∫
            text += (
                f"üõç <b>{item['name']}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {item['price']} ‚ÇΩ\n"
                f"üéÅ –ë–æ–Ω—É—Å: {item['bonus']} ‚ÇΩ\n"
                f"üîó <a href='{item['url']}'>–°–º–æ—Ç—Ä–µ—Ç—å</a>\n\n"
            )

        await callback.message.edit_text(text, parse_mode="HTML")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
