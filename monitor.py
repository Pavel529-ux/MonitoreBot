import os, re, time, signal, traceback
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import requests

# ====== –ö–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –í Railway —É–∂–µ –µ—Å—Ç—å
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")    # –í–∞—à chat_id
WB_FEED_URLS       = [u.strip() for u in os.getenv("WB_FEED_URLS","").split(",") if u.strip()]

CHECK_INTERVAL  = int(os.getenv("CHECK_INTERVAL", "600"))  # —Å–µ–∫ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω)
MAX_PAGES       = int(os.getenv("MAX_PAGES", "3"))
REDIS_URL       = os.getenv("REDIS_URL")                   # –º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å

if not (TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID and WB_FEED_URLS):
    raise SystemExit("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, WB_FEED_URLS")

UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124 Safari/537.36"

# –ü–ª–∞—à–∫–∞/—Ç–µ–∫—Å—Ç –∞–∫—Ü–∏–∏ ¬´–ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤¬ª (–∏–Ω–æ–≥–¥–∞ –ø–∏—à—É—Ç ¬´—Ä—É–±–ª–∏ –∑–∞ –æ—Ç–∑—ã–≤¬ª)
BONUS_RE = re.compile(r'(\d{2,5})\s*(?:‚ÇΩ|—Ä—É–±\w*|–±–∞–ª–ª\w*)\s+–∑–∞\s+–æ—Ç–∑—ã–≤', re.I)

# ====== Redis –¥–ª—è –∞–Ω—Ç–∏-–¥—É–±–ª–µ–π (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω) ======
rds = None
if REDIS_URL:
    try:
        import redis
        rds = redis.from_url(REDIS_URL, decode_responses=True, socket_timeout=5)
        rds.ping()
        print("[init] Redis OK")
    except Exception as e:
        print("[init] Redis connect error:", e)
        rds = None

# –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ Redis –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –¥–µ—Ä–∂–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
local_seen = set()

def dedup_key(nm_id: int) -> str:
    return f"seen:{nm_id}"

def seen_before(nm_id: int) -> bool:
    """True –µ—Å–ª–∏ —É–∂–µ —Å–ª–∞–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É."""
    key = dedup_key(nm_id)
    if rds:
        try:
            if rds.get(key):
                return True
            rds.set(key, "1", ex=7*24*3600)  # –ø–æ–º–Ω–∏–º 7 –¥–Ω–µ–π
            return False
        except Exception:
            pass
    # –ª–æ–∫–∞–ª—å–Ω–æ
    if nm_id in local_seen:
        return True
    local_seen.add(nm_id)
    return False

def set_param(url: str, key: str, value) -> str:
    u = urlparse(url)
    q = parse_qs(u.query)
    q[key] = [str(value)]
    return urlunparse((u.scheme, u.netloc, u.path, u.params, urlencode(q, doseq=True), u.fragment))

def fetch_products(feed_url: str, max_pages: int):
    """–ß–∏—Ç–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π JSON WB. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∏–¥ —É–∂–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º ffeedbackpoints=1."""
    for p in range(1, max_pages + 1):
        url = set_param(feed_url, "page", p)
        r = requests.get(url, headers={"User-Agent": UA}, timeout=25)
        r.raise_for_status()
        data = r.json()
        products = (data.get("data") or {}).get("products") or []
        if not products:
            break
        for item in products:
            yield item

def extract_bonus_from_any(obj):
    """–î–æ—Å—Ç–∞—ë–º —á–∏—Å–ª–æ –±–æ–Ω—É—Å–∞ –∏–∑ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è, –µ—Å–ª–∏ WB –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç –ø–ª–∞—à–∫–∏."""
    if isinstance(obj, str):
        m = BONUS_RE.search(obj)
        if m: return int(m.group(1))
    elif isinstance(obj, dict):
        for v in obj.values():
            b = extract_bonus_from_any(v)
            if b: return b
    elif isinstance(obj, list):
        for v in obj:
            b = extract_bonus_from_any(v)
            if b: return b
    return None

def fallback_bonus_from_card(nm_id: int):
    """–ï—Å–ª–∏ –≤ JSON –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–ª–∞—à–∫–∏ ‚Äî –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ HTML –∫–∞—Ä—Ç–æ—á–∫–∏."""
    url = f"https://www.wildberries.ru/catalog/{nm_id}/detail.aspx"
    try:
        r = requests.get(url, headers={"User-Agent": UA}, timeout=25)
        if r.ok:
            m = BONUS_RE.search(r.text)
            if m:
                return int(m.group(1))
    except Exception:
        pass
    return None

def send_telegram(text: str):
    api = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "disable_web_page_preview": True}
    requests.post(api, json=payload, timeout=20)

def one_scan() -> int:
    """–®–ª—ë–º –¢–û–õ–¨–ö–û —Ç–æ–≤–∞—Ä—ã —Å –∞–∫—Ü–∏–µ–π ¬´–ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤—ã¬ª. –§–∏–¥ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω ffeedbackpoints=1."""
    sent = 0
    for feed in WB_FEED_URLS:
        try:
            for item in fetch_products(feed, MAX_PAGES):
                nm = item.get("id") or item.get("nmId") or item.get("nm")
                if not nm:
                    continue
                nm = int(nm)
                if seen_before(nm):
                    continue

                name = item.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                price_u = item.get("salePriceU") or item.get("priceU") or 0
                price = int(price_u) // 100 if price_u else 0
                link = f"https://www.wildberries.ru/catalog/{nm}/detail.aspx"

                # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ (—ç—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –∫—Ä–∞—Å–∏–≤–æ)
                bonus = None
                for key in ("promoTextCard", "promoTextCat", "description", "extended"):
                    if key in item:
                        bonus = extract_bonus_from_any(item[key])
                        if bonus: break
                if not bonus:
                    bonus = fallback_bonus_from_card(nm)

                if bonus:
                    msg = f"üéØ –ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤\n{name}\n–ë–æ–Ω—É—Å: {bonus} ‚ÇΩ | –¶–µ–Ω–∞: {price} ‚ÇΩ\n{link}"
                else:
                    # –µ—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —à–ª—ë–º (—Ñ–∏–¥ —É–∂–µ —Å ffeedbackpoints=1)
                    msg = f"üéØ –ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤\n{name}\n–¶–µ–Ω–∞: {price} ‚ÇΩ\n{link}"

                try:
                    send_telegram(msg)
                    sent += 1
                    time.sleep(0.4)  # –±–µ—Ä–µ–∂—ë–º API
                except Exception as e:
                    print("[warn] telegram error:", e)
        except Exception as e:
            print("[warn] feed failed:", e)
            traceback.print_exc()
            time.sleep(1.0)
    return sent

# 24/7 —Ü–∏–∫–ª —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
stop_flag = False
def handle_stop(sig, frame):
    global stop_flag
    stop_flag = True
    print(f"[signal] Got {sig}, stopping loop...")

signal.signal(signal.SIGTERM, handle_stop)
signal.signal(signal.SIGINT, handle_stop)

def main_loop():
    print(f"[start] WB monitor (ONLY '–ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤—ã'). Interval={CHECK_INTERVAL}s pages={MAX_PAGES}")
    while not stop_flag:
        n = one_scan()
        print(f"[cycle] Done. Sent: {n}")
        for _ in range(CHECK_INTERVAL):
            if stop_flag: break
            time.sleep(1)
    print("[stop] Exit gracefully")

if __name__ == "__main__":
    main_loop()
