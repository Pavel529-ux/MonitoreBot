import os, re, time, signal, traceback
from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
import requests

# ===== –ö–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")
WB_FEED_URLS       = [u.strip() for u in os.getenv("WB_FEED_URLS","").split(",") if u.strip()]

CHECK_INTERVAL  = int(os.getenv("CHECK_INTERVAL", "600"))  # —Å–µ–∫ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω)
MAX_PAGES       = int(os.getenv("MAX_PAGES", "10"))        # —Ä–∞–∑—É–º–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
REDIS_URL       = os.getenv("REDIS_URL")                   # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
DEBUG           = os.getenv("DEBUG", "1") == "1"           # –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏

if not (TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID and WB_FEED_URLS):
    raise SystemExit("–ù—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, WB_FEED_URLS")

UA = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124 Safari/537.36"

# –ü–ª–∞—à–∫–∞ –≤–∏–¥–∞ "80 ‚ÇΩ –∑–∞ –æ—Ç–∑—ã–≤" (1‚Äì6 —Ü–∏—Ñ—Ä: 10..100000)
BONUS_RE = re.compile(r'(\d{1,6})\s*(?:‚ÇΩ|—Ä—É–±\w*|–±–∞–ª–ª\w*)\s+–∑–∞\s+–æ—Ç–∑—ã–≤', re.I)

# ===== Redis (–∞–Ω—Ç–∏-–¥—É–±–ª–∏) =====
rds = None
if REDIS_URL:
    try:
        import redis
        rds = redis.from_url(REDIS_URL, decode_responses=True, socket_timeout=5)
        rds.ping()
        print("[init] Redis OK")
    except Exception as e:
        print("[init] Redis connect error:", e)
        rds = None

local_seen = set()
def seen_before(nm_id: int) -> bool:
    key = f"seen:{nm_id}"
    if rds:
        try:
            if rds.get(key):
                if DEBUG: print(f"[debug] skip duplicate nm={nm_id}")
                return True
            rds.set(key, "1", ex=7*24*3600)
            return False
        except Exception:
            pass
    if nm_id in local_seen:
        if DEBUG: print(f"[debug] skip duplicate (local) nm={nm_id}")
        return True
    local_seen.add(nm_id)
    return False

def set_param(url: str, key: str, value) -> str:
    u = urlparse(url); q = parse_qs(u.query); q[key] = [str(value)]
    return urlunparse((u.scheme, u.netloc, u.path, u.params, urlencode(q, doseq=True), u.fragment))

def del_param(url: str, key: str) -> str:
    u = urlparse(url); q = parse_qs(u.query)
    if key in q: del q[key]
    return urlunparse((u.scheme, u.netloc, u.path, u.params, urlencode(q, doseq=True), u.fragment))

def http_json(url: str):
    r = requests.get(url, headers={"User-Agent": UA}, timeout=25)
    r.raise_for_status()
    return r.json()

def fetch_products(feed_url: str, max_pages: int, label: str):
    """–ò—Ç–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –ø–µ—á–∞—Ç–∞–µ–º –ª–æ–≥–∏."""
    total = 0
    for p in range(1, max_pages + 1):
        url = set_param(feed_url, "page", p)
        data = http_json(url)
        products = (data.get("data") or {}).get("products") or []
        host = urlparse(url).netloc
        if DEBUG: print(f"[debug] {label} page={p} products={len(products)} host={host}")
        if not products: break
        total += len(products)
        for item in products:
            yield item
    if DEBUG and total == 0:
        print(f"[debug] {label} total=0")
    return total

def extract_bonus_from_any(obj):
    if isinstance(obj, str):
        m = BONUS_RE.search(obj)
        if m: return int(m.group(1))
    elif isinstance(obj, dict):
        for v in obj.values():
            b = extract_bonus_from_any(v)
            if b: return b
    elif isinstance(obj, list):
        for v in obj:
            b = extract_bonus_from_any(v)
            if b: return b
    return None

def fallback_bonus_from_card(nm_id: int):
    url = f"https://www.wildberries.ru/catalog/{nm_id}/detail.aspx"
    try:
        r = requests.get(url, headers={"User-Agent": UA}, timeout=25)
        if r.ok:
            m = BONUS_RE.search(r.text)
            if m: return int(m.group(1))
    except Exception:
        pass
    return None

def has_bonus_badge(item) -> int | None:
    """–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞ –≤ JSON; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º None (–ø–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É–µ–º HTML)."""
    for key in ("promoTextCard", "promoTextCat", "description", "extended", "badges"):
        if key in item:
            b = extract_bonus_from_any(item[key])
            if b: return b
    return None

# ===== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—Ç–≤–µ—Ç–∞ =====
def send_telegram(text: str):
    api = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "disable_web_page_preview": True}
    try:
        r = requests.post(api, json=payload, timeout=20)
        j = r.json()
        if not j.get("ok"):
            print(f"[telegram] not ok: {j}")
    except Exception as e:
        print("[telegram] request failed:", e)
        print("[telegram] status/text:", getattr(r, "status_code", "?"), getattr(r, "text", "")[:200])

def one_scan() -> int:
    sent = 0
    for feed in WB_FEED_URLS:
        if DEBUG: print(f"[debug] scan feed: {feed[:160]}...")
        try:
            # 1) –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É (ffeedbackpoints=1)
            server_total = fetch_products(feed, MAX_PAGES, label="server")
            use_fallback = False

            # 2) –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞–ª ‚Äî —Å–Ω–∏–º–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏ –∏—â–µ–º –ø–ª–∞—à–∫—É —Å–∞–º–∏
            if server_total == 0 and ("ffeedbackpoints=1" in feed or "ffeedbackpoints%3D1" in feed):
                feed_nf = del_param(feed, "ffeedbackpoints")
                print("[fallback] server filter empty ‚Äî scanning without ffeedbackpoints and detecting badge client-side")
                client_total = 0
                for item in fetch_products(feed_nf, MAX_PAGES, label="client"):
                    client_total += 1
                    nm = item.get("id") or item.get("nmId") or item.get("nm")
                    if not nm:
                        continue
                    nm = int(nm)
                    if seen_before(nm):
                        continue

                    bonus = has_bonus_badge(item)
                    if bonus is None:
                        bonus = fallback_bonus_from_card(nm)

                    if bonus is None:
                        continue  # –Ω–µ—Ç –ø–ª–∞—à–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                    name = item.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                    price_u = item.get("salePriceU") or item.get("priceU") or 0
                    price = int(price_u) // 100 if price_u else 0
                    link = f"https://www.wildberries.ru/catalog/{nm}/detail.aspx"

                    msg = f"üéØ –ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤\n{name}\n–ë–æ–Ω—É—Å: {bonus} ‚ÇΩ | –¶–µ–Ω–∞: {price} ‚ÇΩ\n{link}"
                    send_telegram(msg)
                    sent += 1
                    if DEBUG: print(f"[debug] sent (client) nm={nm}, bonus={bonus}, price={price}")
                    time.sleep(0.35)
                # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∏–¥—É
                continue

            # 3) –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–∞–ª —Ç–æ–≤–∞—Ä—ã ‚Äî –ø—Ä–æ—Å—Ç–æ —à–ª—ë–º (–æ–Ω —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω)
            for item in fetch_products(feed, MAX_PAGES, label="server-pass2"):
                nm = item.get("id") or item.get("nmId") or item.get("nm")
                if not nm:
                    continue
                nm = int(nm)
                if seen_before(nm):
                    continue

                name = item.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                price_u = item.get("salePriceU") or item.get("priceU") or 0
                price = int(price_u) // 100 if price_u else 0
                link = f"https://www.wildberries.ru/catalog/{nm}/detail.aspx"

                bonus = has_bonus_badge(item)
                if bonus is None:
                    bonus = fallback_bonus_from_card(nm)

                if bonus:
                    msg = f"üéØ –ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤\n{name}\n–ë–æ–Ω—É—Å: {bonus} ‚ÇΩ | –¶–µ–Ω–∞: {price} ‚ÇΩ\n{link}"
                else:
                    msg = f"üéØ –ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤\n{name}\n–¶–µ–Ω–∞: {price} ‚ÇΩ\n{link}"

                send_telegram(msg)
                sent += 1
                if DEBUG: print(f"[debug] sent (server) nm={nm}, bonus={bonus}, price={price}")
                time.sleep(0.35)

        except Exception as e:
            print("[warn] feed failed:", e)
            traceback.print_exc()
            time.sleep(1.0)
    return sent

# ===== 24/7 —Ü–∏–∫–ª —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º =====
stop_flag = False
def handle_stop(sig, frame):
    global stop_flag
    stop_flag = True
    print(f"[signal] Got {sig}, stopping loop...")

signal.signal(signal.SIGTERM, handle_stop)
signal.signal(signal.SIGINT, handle_stop)

def main_loop():
    print(f"[start] WB monitor (ONLY '–ë–∞–ª–ª—ã –∑–∞ –æ—Ç–∑—ã–≤—ã'). Interval={CHECK_INTERVAL}s pages={MAX_PAGES}")
    send_telegram("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    while not stop_flag:
        n = one_scan()
        print(f"[cycle] Done. Sent: {n}")
        for _ in range(CHECK_INTERVAL):
            if stop_flag: break
            time.sleep(1)
    print("[stop] Exit gracefully")

if __name__ == "__main__":
    main_loop()
